datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int        @id @default(autoincrement())
  userId          String     @unique
  username        String     @unique
  email           String     @unique
  password        String
  avatar          String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  posts           Post[]     @relation("UserCreatedPosts")
  updatedPosts    Post[]     @relation("UserUpdatedPosts")
  comments        Comment[]  @relation("UserComments")
  createdComments Comment[]  @relation("UserCreatedComments")
  updatedComments Comment[]  @relation("UserUpdatedComments")
  votes           Vote[]     @relation("UserVotes")
  votePages       VotePage[] @relation("VotePageUsers") // Named relation
}

model Post {
  id            Int       @id @default(autoincrement())
  postId        String    @unique
  title         String
  description   String
  categoryId    Int
  statusId      Int
  createdBy     Int
  updatedBy     Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  creator       User      @relation("UserCreatedPosts", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("UserUpdatedPosts", fields: [updatedBy], references: [id])
  category      Category  @relation(fields: [categoryId], references: [id])
  status        Status    @relation(fields: [statusId], references: [id])
  votes         Vote[]    @relation("PostVotes")
  VotePage      VotePage? @relation(fields: [votePageId], references: [id])
  votePageId    Int?
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Vote {
  id         Int       @id @default(autoincrement())
  postId     Int
  userId     Int
  post       Post      @relation("PostVotes", fields: [postId], references: [id])
  user       User      @relation("UserVotes", fields: [userId], references: [id])
  VotePage   VotePage? @relation(fields: [votePageId], references: [id])
  votePageId Int?
}

model Comment {
  id            Int      @id @default(autoincrement())
  commentId     String   @unique
  createdBy     Int
  updatedBy     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  createdByUser User     @relation("UserCreatedComments", fields: [createdBy], references: [id], map: "Comment_createdByUser_fkey")
  updatedByUser User?    @relation("UserUpdatedComments", fields: [updatedBy], references: [id], map: "Comment_updatedByUser_fkey")
  user          User?    @relation("UserComments", fields: [createdBy], references: [id], map: "Comment_user_fkey")
}

model VotePage {
  id         Int    @id @default(autoincrement())
  votePageId String @unique
  name       String
  users      User[] @relation("VotePageUsers") // Implicit many-to-many relation
  posts      Post[]
  votes      Vote[]
}
