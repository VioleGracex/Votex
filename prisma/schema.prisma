datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int         @id @default(autoincrement())
  username        String      @unique
  email           String      @unique
  password        String
  avatar          String?
  posts           Post[]      @relation("UserCreatedPosts")
  votes           Vote[]      @relation("UserVotes")
  dashboards      Dashboard[]
  createdComments Comment[]   @relation("UserCreatedComments") // Relation for created comments
  updatedComments Comment[]   @relation("UserUpdatedComments") // Relation for updated comments
  comments        Comment[]   @relation("UserComments")        // Relation for comments
  updatedPosts    Post[]      @relation("UserUpdatedPosts")    // Added reverse relation for updated posts
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  categoryId    Int
  statusId      Int
  createdBy     Int
  updatedBy     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  author        User     @relation("UserCreatedPosts", fields: [createdBy], references: [id])
  updatedByUser User?    @relation("UserUpdatedPosts", fields: [updatedBy], references: [id])
  category      Category @relation(fields: [categoryId], references: [id])
  status        Status   @relation(fields: [statusId], references: [id])
  votes         Vote[]   @relation("PostVotes")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  posts     Post[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String
  posts     Post[]
}

model Vote {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation("PostVotes", fields: [postId], references: [id])
  user   User @relation("UserVotes", fields: [userId], references: [id])
}

model Dashboard {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  groups    Group[]
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id            Int   @id @default(autoincrement())
  createdBy     Int
  updatedBy     Int?
  user          User  @relation("UserComments", fields: [createdBy], references: [id], map: "Comment_user_fkey")
  createdByUser User  @relation("UserCreatedComments", fields: [createdBy], references: [id], map: "Comment_createdByUser_fkey")
  updatedByUser User? @relation("UserUpdatedComments", fields: [updatedBy], references: [id], map: "Comment_updatedByUser_fkey")
}

model Group {
  id          Int        @id @default(autoincrement())
  name        String
  filters     Filter[]
  Dashboard   Dashboard? @relation(fields: [dashboardId], references: [id])
  dashboardId Int?
}

model Filter {
  id        Int      @id @default(autoincrement())
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  updatedAt DateTime @default(now()) @updatedAt
}