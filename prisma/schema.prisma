datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    String         @id @unique
  username  String         @unique
  email     String         @unique
  password  String
  avatar    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  posts     Post[]         @relation("UserPosts")
  comments  Comment[]      @relation("UserComments")
  votes     Vote[]         @relation("UserVotes")
  votePages VotePage[]     @relation("userVotePage")
}

model Post {
  postId      String    @id @unique
  title       String
  description String
  status      Int       @default(1)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  category    String?
  votes       Vote[]    @relation("PostVotes")
  votePage    VotePage? @relation(fields: [votePageId], references: [votePageId], onUpdate: Cascade, onDelete: Cascade)
  votePageId  String?
  author        User      @relation("UserPosts", fields: [createdBy], references: [userId], onUpdate: Cascade, onDelete: Cascade)
}

model Vote {
  id         String    @id @default(uuid())
  postId     String
  userId     String
  votePageId String?
  voteType   Int // 0 for downvote, 1 for upvote
  post       Post      @relation("PostVotes", fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  author       User?     @relation("UserVotes", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  votePage   VotePage? @relation(fields: [votePageId], references: [votePageId], onUpdate: Cascade, onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@index([votePageId])
}

model Comment {
  commentId String   @id @unique
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  author      User?    @relation("UserComments", fields: [createdBy], references: [userId], onUpdate: Cascade, onDelete: Cascade)
}

model VotePage {
  votePageId String         @id @unique
  name       String
  createdBy  String
  userId     String
  users      String[]      
  posts      Post[]
  votes      Vote[]
  author     User?          @relation("userVotePage", fields: [createdBy], references: [userId], onUpdate: Cascade, onDelete: Cascade)
}

